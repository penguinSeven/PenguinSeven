(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{407:function(t,s,n){"use strict";n.r(s);var a=n(25),r=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"初识-nginx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初识-nginx"}},[t._v("#")]),t._v(" 初识 Nginx")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://nginx.org/en/docs/beginners_guide.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("原文地址"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("strong",[t._v("Nginx")]),t._v(" 是一个免费的，开源的，高性能的"),s("strong",[t._v("HTTP")]),t._v("服务器和反向代理，以及"),s("strong",[t._v("IMAP / POP3")]),t._v("代理服务器。 "),s("strong",[t._v("Nginx")]),t._v(" 以其高性能，稳定性，丰富的功能，简单的配置和低资源消耗而闻名。很多高知名度的网站都使用 "),s("strong",[t._v("Nginx")]),t._v("，如："),s("strong",[t._v("Netflix")]),t._v("，"),s("strong",[t._v("GitHub")]),t._v("，"),s("strong",[t._v("SoundCloud")]),t._v("，"),s("strong",[t._v("MaxCDN")]),t._v(" 等。")]),t._v(" "),s("p",[t._v("Nginx 有一个主线程（ master process）和几个工作线程（worker process）。主线程的目的是加载和验证配置文件、维护工作线程。")]),t._v(" "),s("p",[t._v("工作线程处理实际的请求，"),s("strong",[t._v("Nginx")]),t._v(" 采用基于事件的模型和依赖操作系统的机制在工作线程之间高效地分发请求。工作线程的数量可配置，也可自动调整为服务器CPU的数量。")]),t._v(" "),s("p",[s("strong",[t._v("Nginx")]),t._v(" 及其模块的工作方式由配置文件确定。 默认情况下，配置文件名为 "),s("strong",[t._v("nginx.conf")]),t._v("，放在 "),s("strong",[t._v("/usr/local/nginx/conf")]),t._v(" 、"),s("strong",[t._v("/etc/nginx")]),t._v(" 或者 "),s("strong",[t._v("/usr/local/etc/nginx")]),t._v(" 文件夹中。")]),t._v(" "),s("blockquote",[s("p",[t._v("基本命令")])]),t._v(" "),s("p",[s("strong",[t._v("Nginx")]),t._v(" 启动之后，可以使用以下命令控制:")]),t._v(" "),s("div",{staticClass:"language-nginx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nginx"}},[s("code",[t._v("nginx -s <signal>\n")])])]),s("p",[t._v("其中-s意思是向主进程发送信号，"),s("strong",[t._v("signal")]),t._v("可以为以下四个中的一个:")]),t._v(" "),s("div",{staticClass:"language-nginx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nginx"}},[s("code",[t._v("stop — 快速关闭\nquit — 优雅关闭\nreload — 重新加载配置文件\nreopen — 重新打开日志文件\n")])])]),s("p",[t._v("当运行"),s("strong",[t._v("nginx -s quit")]),t._v("时，"),s("strong",[t._v("Nginx")]),t._v(" 会等待工作进程处理完成当前请求，然后将其关闭。当你修改配置文件后，并不会立即生效，而是等待重启或者收到"),s("strong",[t._v("nginx -s reload")]),t._v("信号。")]),t._v(" "),s("p",[t._v("当 "),s("strong",[t._v("Nginx")]),t._v(" 收到 "),s("font",{attrs:{color:"#00ff00",size:"3"}},[t._v("nginx -s reload")]),t._v(" 信号后，首先检查配置文件的语法。语法正确后，主线程会开启新的工作线程并向旧的工作线程发送关闭信号，如果语法不正确，则主线程回滚变化并继续使用旧的配置。当工作进程收到主进程的关闭信号后，会在处理完当前请求之后退出。")],1),t._v(" "),s("h2",{attrs:{id:"配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[t._v("#")]),t._v(" 配置文件")]),t._v(" "),s("p",[s("strong",[t._v("Nginx")]),t._v(" 配置的核心是定义要处理的 "),s("strong",[t._v("URL")]),t._v(" 以及如何响应这些 "),s("strong",[t._v("URL")]),t._v(" 请求，即定义一系列的虚拟服务器（Virtual Servers）控制对来自特定域名或者 IP 的请求的处理。")]),t._v(" "),s("p",[t._v("每一个虚拟服务器定义一系列的 "),s("strong",[t._v("location")]),t._v(" 控制处理特定的 "),s("strong",[t._v("URI")]),t._v(" 集合。每一个location定义了对映射到自己的请求的处理场景，可以返回一个文件或者代理此请求。")]),t._v(" "),s("p",[t._v("Nginx 由不同的模块组成，这些模块由配置文件中指定的指令控制。 指令分为简单指令和块指令。")]),t._v(" "),s("p",[t._v("一个简单指令包含指令名称和指令参数，以空格分隔，以分号（;）结尾。 块指令与简单指令类似，但是由大括号（{和}）包围。 如果块指令大括号中包含其他指令，则称该指令为上下文（如： "),s("strong",[t._v("events")]),t._v(", "),s("strong",[t._v("http")]),t._v(", "),s("strong",[t._v("server")]),t._v(" 和 "),s("strong",[t._v("location")]),t._v("）。")]),t._v(" "),s("p",[t._v("配置文件中的放在上下文之外的指令默认放在主配置文件中（类似继承主配置文件）。 "),s("strong",[t._v("events")]),t._v(" 和 "),s("strong",[t._v("http")]),t._v(" 放置在主配置文件中，"),s("strong",[t._v("server")]),t._v(" 放置在"),s("strong",[t._v("http")]),t._v("块指令中，"),s("strong",[t._v("location")]),t._v("放置在"),s("strong",[t._v("server")]),t._v("块指令中。")]),t._v(" "),s("p",[t._v("配置文件的注释以 # 开始。")]),t._v(" "),s("h2",{attrs:{id:"静态内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态内容"}},[t._v("#")]),t._v(" 静态内容")]),t._v(" "),s("p",[s("strong",[t._v("Web")]),t._v(" 服务器一个重要的功能是服务静态文件（图像或静态HTML页面）。例如，"),s("strong",[t._v("Nginx")]),t._v(" 可以很方便的让服务器从**/data/www** 获取 "),s("strong",[t._v("html")]),t._v(" 文件，从**/data/images"),s("strong",[t._v("获取图片来返回给客户端，这只需要在http块指令中的")]),t._v("server"),s("strong",[t._v("块指令中设置两个")]),t._v("location**块指令。")]),t._v(" "),s("p",[t._v("首先，创建 "),s("strong",[t._v("/data/www")]),t._v(" 目录，并放入 "),s("strong",[t._v("index.html")]),t._v("，创建 "),s("strong",[t._v("/data/images")]),t._v(" 目录并在其中放置一些图片。")]),t._v(" "),s("p",[t._v("接下来，打开配置文件。 创建一个 "),s("strong",[t._v("server")]),t._v(" 块：")]),t._v(" "),s("div",{staticClass:"language-nginx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nginx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("http")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("通常，配置文件可以包括多个 "),s("strong",[t._v("server")]),t._v(" 块，它们以端口和服务器名称来区分。当 "),s("strong",[t._v("Nginx")]),t._v(" 决定某一个 server 处理请求后，它将请求头中的 "),s("strong",[t._v("URI")]),t._v(" 和 "),s("strong",[t._v("server")]),t._v(" 块中的 "),s("strong",[t._v("location")]),t._v(" 块进行对比。\n加入 "),s("strong",[t._v("location")]),t._v(" 块指令到 "),s("strong",[t._v("server")]),t._v(" 中：")]),t._v(" "),s("p",[t._v("将以下位置块添加到服务器块：")]),t._v(" "),s("div",{staticClass:"language-nginx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nginx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" /")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("root")]),t._v(" /data/www")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("上面的 "),s("strong",[t._v("location")]),t._v(" 块指定 / 前缀与请求中的 "),s("strong",[t._v("URI")]),t._v(" 对比。对于匹配的请求，"),s("strong",[t._v("URI")]),t._v(" 将被添加到 "),s("strong",[t._v("root")]),t._v(" 指令中指定的路径，即 "),s("strong",[t._v("/data/www")]),t._v("，以此形成本地文件系统的路径，如访问http://localhost/bog/welcome.html，对应服务器文件路径为**/data/www/bog/welcome.html**。 如果 URI 匹配多个 "),s("strong",[t._v("location")]),t._v(" 块，"),s("strong",[t._v("Nginx")]),t._v(" 采用最长前缀匹配原则（类似计算机网络里面的"),s("strong",[t._v("IP")]),t._v("匹配）， 上面的 "),s("strong",[t._v("location")]),t._v(" 块前缀长度为 1，因此只有当所有其他 "),s("strong",[t._v("location")]),t._v(" 块匹配时，才使用该块。")]),t._v(" "),s("p",[t._v("接下来，添加第二个位置块：")]),t._v(" "),s("div",{staticClass:"language-nginx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nginx"}},[s("code",[t._v("\n"),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" /images/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("root")]),t._v(" /data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("它将匹配以**/images/**（/ 也匹配这样的请求，但具有较短的前缀）开始的请求。")]),t._v(" "),s("p",[s("strong",[t._v("server")]),t._v(" 块的最终配置如下：")]),t._v(" "),s("div",{staticClass:"language-nginx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nginx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" /")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("root")]),t._v(" /data/www")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" /images/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("root")]),t._v(" /data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("到目前为止，这已经是一个可以正常运行的服务器，它监听端口80，并且可以在本地计算机上访问 http://localhost/。 对于 "),s("strong",[t._v("/images/")]),t._v(" 开头的请求，服务器将从 /data/images 目录发送文件。 如，对于 http://localhost/images/example.png 请求，"),s("strong",[t._v("nginx")]),t._v(" 将响应 "),s("strong",[t._v("/data/images/example.png")]),t._v("文件。 如果不存在，"),s("strong",[t._v("nginx")]),t._v(" 将返回"),s("strong",[t._v("404")]),t._v("。"),s("strong",[t._v("URI")]),t._v(" 不以 "),s("strong",[t._v("/images/")]),t._v(" 开头的请求将映射到 "),s("strong",[t._v("/data/www")]),t._v(" 目录。 例如，对于 http://localhost/some/example.html 请求，"),s("strong",[t._v("nginx")]),t._v(" 将响应 "),s("strong",[t._v("/data/www/some/example.html")]),t._v(" 文件。")]),t._v(" "),s("h2",{attrs:{id:"代理服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代理服务器"}},[t._v("#")]),t._v(" 代理服务器")]),t._v(" "),s("p",[s("strong",[t._v("Nginx")]),t._v(" 的一个常见应用是将其设置为代理服务器（"),s("strong",[t._v("Proxy Server")]),t._v("），即接受客户端的请求并将其转发给代理服务器，再接受代理服务器发来的响应，将它们发送到客户端。")]),t._v(" "),s("p",[t._v("比如我们可以用一个 "),s("strong",[t._v("Nginx")]),t._v(" 实例实现对图片文件的请求使用本地文件系统，而其他请求转发到代理服务器。")]),t._v(" "),s("p",[t._v("首先，向 "),s("strong",[t._v("Nginx")]),t._v(" 的配置文件中添加一个 "),s("strong",[t._v("server")]),t._v(" 块来定义代理服务器：")]),t._v(" "),s("div",{staticClass:"language-nginx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nginx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("listen")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("root")]),t._v(" /data/up1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" /")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("此服务器侦听端口"),s("strong",[t._v("8080")]),t._v("，并将所有请求映射到本地文件系统上的 "),s("strong",[t._v("/data/up1")]),t._v(" 目录。 创建此目录并将 "),s("strong",[t._v("index.html")]),t._v(" 放入其中。 注意，"),s("strong",[t._v("root")]),t._v(" 指令放在 "),s("strong",[t._v("server")]),t._v(" 上下文中，这样 当 "),s("strong",[t._v("location")]),t._v(" 块中不含 "),s("strong",[t._v("root")]),t._v(" 指令时将使用所属 "),s("strong",[t._v("server")]),t._v(" 的 "),s("strong",[t._v("root")]),t._v(" 指令。")]),t._v(" "),s("p",[t._v("接下来，使用上一节中的服务器配置，并将其修改为代理服务器配置。 在第一个位置块中，加上proxy_pass指令：")]),t._v(" "),s("div",{staticClass:"language-nginx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nginx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" /")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# proxy_pass指令的参数为：协议+主机名+端口号")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proxy_pass")]),t._v(" http://localhost:8080")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" /images/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("root")]),t._v(" /data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("修改第二个 匹配 "),s("strong",[t._v("/images/")]),t._v(" 前缀的 "),s("strong",[t._v("location")]),t._v(" 块，使其与请求图像文件的扩展名相匹配：")]),t._v(" "),s("div",{staticClass:"language-nginx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nginx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" ~ \\.(gif|jpg|png)$")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("root")]),t._v(" /data/images")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("该参数是一个正则表达式，匹配以**.gif**，"),s("strong",[t._v(".jpg")]),t._v("或**.png"),s("strong",[t._v("结尾的所有")]),t._v("URI**。 正则表达式应该以 ~ 开头。 相应的请求将映射到 "),s("strong",[t._v("/data/images")]),t._v(" 目录。")]),t._v(" "),s("p",[t._v("当 "),s("strong",[t._v("Nginx")]),t._v(" 选择一个 "),s("strong",[t._v("location")]),t._v(" 块来处理请求时，它首先检查指定 "),s("strong",[t._v("location")]),t._v(" 块的前缀，记住具有最长前缀的 "),s("strong",[t._v("location")]),t._v(" 块，然后检查正则表达式。 如果与正则表达式匹配， "),s("strong",[t._v("Nginx")]),t._v(" 选择此 "),s("strong",[t._v("location")]),t._v(" 块，否则，选择先前记住的 "),s("strong",[t._v("location")]),t._v(" 块。")]),t._v(" "),s("p",[t._v("代理服务器的最终配置如下：")]),t._v(" "),s("div",{staticClass:"language-nginx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nginx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" /")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proxy_pass")]),t._v(" http://localhost:8080/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" ~ \\.(gif|jpg|png)$")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("root")]),t._v(" /data/images")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("此服务器将过滤以**.gif**，"),s("strong",[t._v(".jpg")]),t._v("或**.png"),s("strong",[t._v("结尾的请求，并将它们映射到 "),s("strong",[t._v("/data/images")]),t._v(" 目录（通过向 "),s("strong",[t._v("root")]),t._v(" 指令的参数添加请求的")]),t._v("URI**），并将所有其他请求发送给上面配置的代理服务器。")]),t._v(" "),s("p",[t._v("这样，图片和其他请求就可以使用不同的服务器来处理。")]),t._v(" "),s("h2",{attrs:{id:"fastcgi代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fastcgi代理"}},[t._v("#")]),t._v(" FastCGI代理")]),t._v(" "),s("p",[s("strong",[t._v("Nginx")]),t._v(" 可用于将请求路由到 "),s("strong",[t._v("FastCGI")]),t._v(" 服务器。快速通用网关接口（Fast Common Gateway Interface／FastCGI）是一种让交互程序与"),s("strong",[t._v("Web")]),t._v("服务器通信的协议。因此 "),s("strong",[t._v("Nginx")]),t._v(" 可以将请求路由到 "),s("strong",[t._v("FastCGI")]),t._v(" 运行的应用程序，如 "),s("strong",[t._v("PHP")]),t._v(" 程序。")]),t._v(" "),s("p",[t._v("使用 "),s("strong",[t._v("FastCGI")]),t._v(" 服务器的最基本的 "),s("strong",[t._v("Nginx")]),t._v(" 配置包括使用 "),s("strong",[t._v("fastcgi_pass")]),t._v(" 指令而不是 "),s("strong",[t._v("proxy_pass")]),t._v(" 指令，以及使用 "),s("strong",[t._v("fastcgi_param")]),t._v(" 指令来设置传递给 "),s("strong",[t._v("FastCGI")]),t._v(" 服务器的参数。 假设"),s("strong",[t._v("FastCGI")]),t._v("服务器可在 "),s("strong",[t._v("localhost:9000")]),t._v(" 上访问。 以上一节中的代理服务器配置为基础，使用fastcgi_pass指令替换proxy_pass指令，并将参数更改为 "),s("strong",[t._v("localhost:9000")]),t._v(" 。 在 "),s("strong",[t._v("PHP")]),t._v(" 中， "),s("strong",[t._v("SCRIPT_FILENAME")]),t._v(" 参数用于确定脚本名称，而 "),s("strong",[t._v("QUERY_STRING")]),t._v(" 参数用于传递请求参数。 生成的配置将是：")]),t._v(" "),s("div",{staticClass:"language-nginx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nginx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" /")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fastcgi_pass")]),t._v("  localhost:9000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fastcgi_param")]),t._v(" SCRIPT_FILENAME "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$document_root")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fastcgi_script_name")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fastcgi_param")]),t._v(" QUERY_STRING    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$query_string")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" ~ \\.(gif|jpg|png)$")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("root")]),t._v(" /data/images")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这将设置一个服务器，将路由除静态图像以外的所有请求到运行在 "),s("strong",[t._v("localhost:9000")]),t._v(" 的 "),s("strong",[t._v("FastCGI")]),t._v(" 服务器。")])])}),[],!1,null,null,null);s.default=r.exports}}]);